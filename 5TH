#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) {
        return 0;
    }

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0) {
        x1 += m0;
    }

    return x1;
}

void affine_caesar_encrypt(int a, int b, char *plaintext, char *ciphertext) {
    int i, p, c;
    int m = 26;

    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            p = toupper(plaintext[i]) - 'A';
            c = ((a * p) + b) % m;
            ciphertext[i] = c + 'A';
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}

void affine_caesar_decrypt(int a, int b, char *ciphertext, char *plaintext) {
    int i, p, c;
    int m = 26;
    int a_inv = mod_inverse(a, m);

    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            c = toupper(ciphertext[i]) - 'A';
            p = (a_inv * (c - b + m)) % m;
            plaintext[i] = p + 'A';
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}

int main() {
    int a, b;
    char plaintext[100], ciphertext[100], decrypted_plaintext[100];

    printf("Enter the plaintext: ");
    fgets(plaintext, 100, stdin);

    printf("Enter the key parameters a and b: ");
    scanf("%d %d", &a, &b);

    // Check if b is a multiple of 26
    if (b % 26 == 0) {
        printf("Invalid key parameters: b must not be a multiple of 26.\n");
        return 0;
    }

    // Check if a is relatively prime to 26
    if (gcd(a, 26) != 1) {
        printf("Invalid key parameters: a must be relatively prime to 26.\n");
        return 0;
    }

    affine_caesar_encrypt(a, b, plaintext, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    affine_caesar_decrypt(a, b, ciphertext, decrypted_plaintext);
    printf("Decrypted text: %s\n", decrypted_plaintext);

    return 0;
}
