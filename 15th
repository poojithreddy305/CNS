#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_SIZE 1000

int main() {
    char ciphertext[MAX_TEXT_SIZE];
    int key_size, i, j, k;
    
    // Read in the ciphertext and the key size
    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_SIZE, stdin);
    printf("Enter the key size: ");
    scanf("%d", &key_size);
    
    // Initialize the frequency count array to all zeroes
    int freq[26];
    memset(freq, 0, sizeof(freq));
    
    // Count the frequency of each letter in the ciphertext
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            freq[tolower(ciphertext[i]) - 'a']++;
        }
    }
    
    // Find the most common letter in the ciphertext
    int max_freq = 0, max_index = 0;
    for (i = 0; i < 26; i++) {
        if (freq[i] > max_freq) {
            max_freq = freq[i];
            max_index = i;
        }
    }
    
    // Guess the most common letter in the plaintext based on frequency analysis
    char guessed_plaintext = 'e' - (max_index - ('a' + key_size) + 26) % 26;
    
    // Try all possible keys and output the top 10 most likely plaintexts
    printf("\nTop 10 possible plaintexts:\n");
    for (i = 0; i < 26; i++) {
        int key = i - (guessed_plaintext - 'e' + 26) % 26;
        printf("Key = %d: ", key);
        
        // Decrypt the ciphertext using the current key
        for (j = 0, k = 0; ciphertext[j] != '\0'; j++) {
            if (isalpha(ciphertext[j])) {
                char c = ciphertext[j];
                char p = ((c - 'a' - key) % 26 + 26) % 26 + 'a';
                printf("%c", p);
                k++;
                if (k >= MAX_TEXT_SIZE) {
                    break;
                }
            }
        }
        
        printf("\n");
    }
    
    return 0;
}
